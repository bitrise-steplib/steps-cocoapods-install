// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	command "github.com/bitrise-io/go-utils/v2/command"
	mock "github.com/stretchr/testify/mock"
)

// CommandFactory is an autogenerated mock type for the CommandFactory type
type CommandFactory struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, args, opts
func (_m *CommandFactory) Create(name string, args []string, opts *command.Opts) command.Command {
	ret := _m.Called(name, args, opts)

	var r0 command.Command
	if rf, ok := ret.Get(0).(func(string, []string, *command.Opts) command.Command); ok {
		r0 = rf(name, args, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.Command)
		}
	}

	return r0
}

// CreateBundleExec provides a mock function with given fields: name, args, bundlerVersion, opts
func (_m *CommandFactory) CreateBundleExec(name string, args []string, bundlerVersion string, opts *command.Opts) command.Command {
	ret := _m.Called(name, args, bundlerVersion, opts)

	var r0 command.Command
	if rf, ok := ret.Get(0).(func(string, []string, string, *command.Opts) command.Command); ok {
		r0 = rf(name, args, bundlerVersion, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.Command)
		}
	}

	return r0
}

// CreateBundleInstall provides a mock function with given fields: bundlerVersion, opts
func (_m *CommandFactory) CreateBundleInstall(bundlerVersion string, opts *command.Opts) command.Command {
	ret := _m.Called(bundlerVersion, opts)

	var r0 command.Command
	if rf, ok := ret.Get(0).(func(string, *command.Opts) command.Command); ok {
		r0 = rf(bundlerVersion, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.Command)
		}
	}

	return r0
}

// CreateGemInstall provides a mock function with given fields: gem, version, enablePrerelease, force, opts
func (_m *CommandFactory) CreateGemInstall(gem string, version string, enablePrerelease bool, force bool, opts *command.Opts) []command.Command {
	ret := _m.Called(gem, version, enablePrerelease, force, opts)

	var r0 []command.Command
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, *command.Opts) []command.Command); ok {
		r0 = rf(gem, version, enablePrerelease, force, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]command.Command)
		}
	}

	return r0
}

// CreateGemUpdate provides a mock function with given fields: gem, opts
func (_m *CommandFactory) CreateGemUpdate(gem string, opts *command.Opts) []command.Command {
	ret := _m.Called(gem, opts)

	var r0 []command.Command
	if rf, ok := ret.Get(0).(func(string, *command.Opts) []command.Command); ok {
		r0 = rf(gem, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]command.Command)
		}
	}

	return r0
}

type mockConstructorTestingTNewCommandFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandFactory creates a new instance of CommandFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandFactory(t mockConstructorTestingTNewCommandFactory) *CommandFactory {
	mock := &CommandFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
